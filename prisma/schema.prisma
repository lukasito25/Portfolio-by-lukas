// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials authentication
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]

  // Portfolio content relationships
  projects      Project[]
  blogPosts     BlogPost[]
  recruiterPages RecruiterPage[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Portfolio content models
model Project {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  content     String
  excerpt     String?

  // Media and assets
  thumbnail   String?
  images      String? // JSON string of image URLs
  demoUrl     String?
  githubUrl   String?

  // Metadata
  technologies Technology[] @relation("ProjectTechnologies")
  category    String?
  status      ProjectStatus @default(DRAFT)
  featured    Boolean   @default(false)
  sortOrder   Int       @default(0)

  // SEO
  metaTitle       String?
  metaDescription String?

  // Author
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])

  // Analytics
  views       Int       @default(0)
  likes       Int       @default(0)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?

  // Media
  thumbnail   String?

  // Metadata
  tags        Tag[]     @relation("BlogPostTags")
  category    String?
  status      PostStatus @default(DRAFT)
  featured    Boolean   @default(false)

  // SEO
  metaTitle       String?
  metaDescription String?

  // Author
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])

  // Analytics
  views       Int       @default(0)
  likes       Int       @default(0)
  readTime    Int?      // estimated read time in minutes

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
}

model Technology {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?   // URL or icon identifier
  color       String?   // hex color code
  category    String?   // e.g., "Frontend", "Backend", "Database"
  level       SkillLevel @default(BEGINNER)

  projects    Project[] @relation("ProjectTechnologies")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  color     String?    // hex color code

  blogPosts BlogPost[] @relation("BlogPostTags")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ContactSubmission {
  id          String   @id @default(cuid())
  name        String
  email       String
  subject     String?
  message     String
  phone       String?
  company     String?

  // Project details
  projectType String?
  budgetRange String?
  source      String?

  // Status tracking
  status      ContactStatus @default(NEW)
  responded   Boolean   @default(false)
  respondedAt DateTime?

  // Spam protection
  ipAddress   String?
  userAgent   String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Newsletter {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  subscribed  Boolean  @default(true)
  confirmed   Boolean  @default(false)

  // Tracking
  source      String?  // where they subscribed from
  ipAddress   String?

  subscribedAt DateTime @default(now())
  confirmedAt  DateTime?
  unsubscribedAt DateTime?
}

model Analytics {
  id          String   @id @default(cuid())

  // Page analytics
  path        String
  title       String?

  // User info (anonymized)
  sessionId   String
  ipAddress   String?
  userAgent   String?
  country     String?
  city        String?

  // Referrer info
  referrer    String?
  source      String?   // e.g., "google", "direct", "github"
  medium      String?   // e.g., "organic", "social", "referral"
  campaign    String?

  // Engagement metrics
  duration    Int?      // time spent on page in seconds
  scrollDepth Int?      // percentage of page scrolled (0-100)
  bounce      Boolean   @default(false)

  createdAt   DateTime  @default(now())

  @@index([path])
  @@index([sessionId])
  @@index([createdAt])
}

model MediaFile {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int      // file size in bytes
  url         String   // URL to access the file
  alt         String?  // alt text for images

  // Metadata
  width       Int?     // for images
  height      Int?     // for images

  // Organization
  folder      String?  // virtual folder structure
  tags        String? // JSON string for categorization

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Enums
enum Role {
  USER
  ADMIN
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ContactStatus {
  NEW
  READ
  RESPONDED
  ARCHIVED
}

// Recruiter Landing Page System Models
model RecruiterPage {
  id           String   @id @default(cuid())
  title        String
  slug         String   @unique
  companyName  String
  companySlug  String
  isActive     Boolean  @default(true)

  // Target Role & Company
  roleName     String?
  roleLevel    String?  // "Director", "VP", "Chief"
  companySize  String?  // "Startup", "Growth", "Enterprise"
  industry     String?  // "B2B SaaS", "E-commerce", "FinTech"

  // Template & Personalization
  templateType String   // "company-mirror", "day-one-impact", "executive-briefing"
  customContent Json?   // Flexible content structure

  // Company Research Integration
  companyInfo  Json?    // Researched company data
  challenges   Json?    // Identified challenges array
  solutions    Json?    // Proposed solutions array

  // Analytics & Performance
  views        Int      @default(0)
  uniqueViews  Int      @default(0)
  timeOnPage   Int?     // Average seconds
  responses    Int      @default(0)

  // Metadata
  authorId     String
  author       User     @relation(fields: [authorId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  analytics    RecruiterPageAnalytics[]
  interactions RecruiterPageInteraction[]

  @@index([companySlug])
  @@index([templateType])
  @@index([authorId])
}

// Page Analytics Tracking
model RecruiterPageAnalytics {
  id           String       @id @default(cuid())
  pageId       String
  page         RecruiterPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  // Visitor Info
  sessionId    String
  ipAddress    String?
  userAgent    String?
  referrer     String?

  // Engagement Metrics
  timeSpent    Int?         // Seconds on page
  scrollDepth  Int?         // Percentage scrolled
  interactions Int          @default(0)

  // Geographic
  country      String?
  city         String?

  visitedAt    DateTime     @default(now())

  @@index([pageId])
  @@index([sessionId])
  @@index([visitedAt])
}

// Interactive Elements Tracking
model RecruiterPageInteraction {
  id           String       @id @default(cuid())
  pageId       String
  page         RecruiterPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  // Interaction Details
  sessionId    String
  elementType  String       // "roi-calculator", "action-plan", "case-study"
  elementId    String
  actionType   String       // "click", "input", "download", "share"

  // Data Captured
  inputData    Json?        // User inputs for calculators
  result       Json?        // Calculated results
  duration     Int?         // Time spent on element

  createdAt    DateTime     @default(now())

  @@index([pageId])
  @@index([sessionId])
  @@index([elementType])
}

// Company Research Cache
model CompanyResearch {
  id             String   @id @default(cuid())
  companyName    String   @unique
  domain         String?

  // Basic Info
  size           String?  // "10-50", "100-500", "1000+"
  industry       String?
  stage          String?  // "Startup", "Growth", "Public"
  location       String?

  // Business Intelligence
  recentNews     Json?    // Latest news and announcements
  products       Json?    // Product portfolio
  competitors    Json?    // Competitive landscape
  challenges     Json?    // Identified market challenges

  // Technology Stack (if available)
  techStack      Json?

  // Update tracking
  lastResearched DateTime @default(now())
  needsUpdate    Boolean  @default(false)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([companyName])
  @@index([industry])
}
